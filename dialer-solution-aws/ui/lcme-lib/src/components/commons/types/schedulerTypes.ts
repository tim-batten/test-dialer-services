import { IdObj } from './globalTypes';

export interface IScheduler {
  schedule: ISched;
  campaignSelection: ICampaignSelection;
  sequences: ISequence[];
}

export interface ISched {
  timeZone: string;
  doesEnd: boolean;
  startDate: string;
  startTime: string;
  endTime: string;
  endDate: string;
  recurrence: IRecurrence;
}

export interface IRecurrence {
  type: string;
  value: any;
  misc: any;
}

export interface ICampaignSelection {
  campaign: string;
  group: string;
  callingMode: string;
  concurrentCalls: number;
  scheduleLoops: number;
}

export interface ISequence {
  sequenceName: string;
  basicConfig: IBasicConfig;
  filteringAndSorting: IFilteringNSorting;
  pacing?: IPacingSeq;
}

export interface IBasicConfig {
  livePartyHandler: string;
  livePartyContactFlow: string;
  answeringMachineHandler: string;
  answeringMachineContactFlow: string;
  phones: string[];
}

export interface IFilteringNSorting {
  contactFilters: any[];
  phoneFilters: any[];
  contactSorting: any[];
}

export interface IPacingSeq {
  clearPacing: string;
  initialCpaMode?: string;
  initialCpa?: number;
  initialDuration?: number;
  abaIncrement?: number;
  cpaModifier?: number;
  abaCalculation?: string;
  abaTargetRate?: number;
}

// Generated by https://quicktype.io

export interface ISchedule extends IdObj {
  ScheduleName: string;
  Occurrence: Occurrence;
  CampaignId: string;
  // CallingMode: string;
  Loops: number;
  PacingOverride?: IPacingOverride;
  Sequences: Sequence[];
  ScheduleTimeZone?: string;
}

export interface IScheduleEvents {
  schedule: ISchedule;
  lastExecOccurrence: any;
  scheduleTimezone: string;
  occurrenceListTimezone: string;
  occurrences: Occurrences[];
}

export interface Occurrences {
  start: string;
  end: string;
  status: string;
}

export interface IPacingOverride {
  ConcurrentCalls?: number;
}

export interface Sequence {
  SequenceName: string;
  BasicConfig: BasicConfig;
  FilterSort: FilterSort;
  Pacing?: PacingSeq;
}

export interface BasicConfig {
  AmDetection: boolean;
  MachineDetectedBehavior?: string;
  ConnectBehavior: string;
  MachineDetectedContactFlow?: string;
  DefaultContactFlow?: string;
  Phones: string[];
}

export interface FilterSort {
  ClFilters: FilterID[];
  PndFilters?: FilterID[];
  ClSorts?: ClSort[];
}

export interface FilterID {
  FilterID: string;
}

export interface ClSort {
  OrderByID: string;
  OrderByType: string;
}

export interface PacingSeq {
  ClearStats: string;
  PacingOverride?: PacingOverrideSeq;
}

export interface PacingOverrideSeq {
  InitialCPAMode?: string;
  InitialCPA?: number;
  InitialDuration?: number;
  AbaIncrement?: number;
  CpaModifier?: number;
  AbaCalculation?: string;
  AbaTargetRate?: number;
}

export interface Occurrence {
  Recurring?: Recurring;
  Single?: Single;
  Duration: number;
}

export interface Recurring {
  Exclusions: Exclusion[];
  DisabledDates: string[];
  RRule: string;
}

export interface Exclusion {
  Date: string;
  OccurrenceId: string;
}

export interface Single {
  Date: string;
  Parent: string;
}

export type ModType = 'occurrence' | 'series';

export interface IEnableReason {
  disabledReason: string;
  date: string;
}

export type sequencePacingFields =
  | 'InitialCpa'
  | 'InitialPacingDuration'
  | 'InitialPacingSamples'
  | 'AbandonmentIncrement'
  | 'CpaModifier'
  | 'AbaTargetRate';
